#!/bin/bash

#################################################
# easydock ;)                                   #
# https://github.com/andreapollastri/easydock/  #
#################################################

############################################################ COMMON VARS
menu=$1
action=$2
reset=$(tput sgr0)
br="\n"
bold=$(tput bold)
underline=$(tput smul)
black=$(tput setaf 0)
white=$(tput setaf 7)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
purple=$(tput setaf 5)
bgblack=$(tput setab 0)
bgwhite=$(tput setab 7)
bgred=$(tput setab 1)
bggreen=$(tput setab 2)
bgyellow=$(tput setab 3)
bgblue=$(tput setab 4)
bgpurple=$(tput setab 5)

############################################################ LOGO
ed_logo() {
    echo "${yellow}${bold}"
    echo "******************************************************"
    echo "                           _            _      __   "
    echo "   ___  __ _ ___ _   _  __| | ___   ___| | __  \ \  "
    echo "  / _ \/ _' / __| | | |/ _' |/ _ \ / __| |/ / (_) | "
    echo " |  __/ (_| \__ \ |_| | (_| | (_) | (__|   <   _| | "
    echo "  \___|\__,_|___/\__, |\__,_|\___/ \___|_|\_\ ( ) | "
    echo "                 |___/                        |/_/  "
    echo ""
    echo "******************************************************"
    echo "${reset}${br}"
}

############################################################ DOCKER CHECK
if !docker info >/dev/null 2>&1; then
    echo "${bgwhite}${red}${bold} >>> ERROR! ${reset} To run easydock ; you have to install Docker and Docker Composer.${1}Find out more on: https://www.docker.com/products/docker-desktop ${reset}${br}"
    exit
fi

############################################################ VENDOR EXPORT
if [ $1 == "export" ]; then
    clear
    ed_logo
    echo "${blue}Wait...${br}${reset}"
    clear
    ed_logo
    unlink ./.env.ed
    cp ./vendor/andreapollastri/easydock/src/composer/.edenv ./.env.ed
    unlink ./docker-compose.yml
    cp ./vendor/andreapollastri/easydock/src/composer/.compose ./docker-compose.yml
    unlink ./ed
    cp ./vendor/andreapollastri/easydock/src/composer/.script ./ed
    sed -i -e 's/APP_SID=easydock/APP_SID=easydock'$(((RANDOM%1000000000)+1))'/g' .env.ed
    unlink ./.env.ed-e
    clear
    ed_logo
    echo "${bgpurple}${white} easydock is ready! All you have to do is compile your ${bold}.env.ed${reset}${bgpurple}${white} file and run ${bold}sh ed setup${reset}${bgpurple}${white} ;) ${br}${reset}"
    exit
fi

############################################################ ENV FILE MANAGER

if [ $1 == "env" ]; then
    clear
    ed_logo
    echo "${blue}Wait...${br}${reset}"
    clear
    ed_logo
    if test -f "./.env.ed"; then
        echo "${bgyellow}${black}${bold} >>> WARNING! ${reset} an .env.ed file is located in your workspace. Delete it if you want regenerate it within this command. ${reset}${br}"
    else
        cp ./vendor/andreapollastri/easydock/src/composer/.edenv ./.env.ed
        sed -i -e 's/APP_SID=easydock/APP_SID=easydock'$(((RANDOM%1000000000)+1))'/g' .env.ed
        unlink ./.env.ed-e
        clear
        ed_logo
        echo "${bgpurple}${white} Your ${bold}.env.ed${reset}${bgpurple}${white} has been created ;) ${br}${reset}"
    fi
    exit
fi

if test -f "./.env.ed"; then
    clear
    ed_logo
else
    clear
    ed_logo
    echo "${bgwhite}${red}${bold} >>> ERROR! ${reset} File ${bgred}${white}${bold} .env.ed ${reset} is missing. Run ${bgred}${white}${bold} sh ed env ${reset} to generate it. ${reset}${br}"
    exit
fi

ed_portapp=$(grep APP_PORT ./.env.ed | cut -d '=' -f2)
ed_portdb=$(grep DB_PORT ./.env.ed | cut -d '=' -f2)
ed_portpma=$(grep PMA_PORT ./.env.ed | cut -d '=' -f2)
ed_portmh=$(grep MH_PORT ./.env.ed | cut -d '=' -f2)
ed_portrds=$(grep RDS_PORT ./.env.ed | cut -d '=' -f2)
ed_appsid=$(grep APP_SID ./.env.ed | cut -d '=' -f2)
ed_appsrc=$(grep APP_SRC ./.env.ed | cut -d '=' -f2)
ed_phpver=$(grep PHP_V ./.env.ed | cut -d '=' -f2)
ed_dbver=$(grep DB_VERS ./.env.ed | cut -d '=' -f2)
ed_dbname=$(grep DB_NAME ./.env.ed | cut -d '=' -f2)
ed_dbpass=$(grep DB_PASS ./.env.ed | cut -d '=' -f2)
ed_nginx=$(grep NGINX_MODE ./.env.ed | cut -d '=' -f2)

############################################################ COMMON FUNCTIONS

ed_notfound() {
    command="$1"
    clear
    ed_logo
    echo "${bgwhite}${red}${bold} >>> ERROR! ${reset} Command ${bgred}${white}${bold} sh ed $command ${reset} is not a valid option. Run ${bgred}${white}${bold} sh ed help ${reset} to obtain a list of valid options. ${reset}${br}"
}

ed_isthisportfree() {
    port="$1"
    check=$(lsof -i tcp:$port)
    if [ -z "$check" ]; then
        return 0
    else
        return 1
    fi
}

ed_unavailableport() {
    port=$1
    echo "${bgwhite}${red}${bold} >>> ERROR! ${reset} Port: ${bgred}${white}${bold} $port ${reset} is used. Try another port. ${reset}${br}"
    exit
}

ed_availableport() {
    port=$1
    echo "${green}$port is available!${reset}"
}

ed_checkingport() {
    port=$1
    echo "${br}${blue}Checkin port $port...${reset}"
}

ed_portscheck() {
    ed_checkingport $ed_portapp
    if ed_isthisportfree $ed_portapp; then
        ed_availableport $ed_portapp
    else
        ed_unavailableport $ed_portapp
    fi
    ed_checkingport $ed_portdb
    if ed_isthisportfree $ed_portdb; then
        ed_availableport $ed_portdb
    else
        ed_unavailableport $ed_portdb
    fi
    ed_checkingport $ed_portpma
    if ed_isthisportfree $ed_portpma; then
        ed_availableport $ed_portpma
    else
        ed_unavailableport $ed_portpma
    fi
    ed_checkingport $ed_portmh
    if ed_isthisportfree $ed_portmh; then
        ed_availableport $ed_portmh
    else
        ed_unavailableport $ed_portmh
    fi
    ed_checkingport $ed_portrds
    if ed_isthisportfree $ed_portrds; then
        ed_availableport $ed_portrds
    else
        ed_unavailableport $ed_portrds
    fi
}

############################################################ CLI FUNCTIONS

ed_help() {
    echo "${bgpurple}${white}${bold} easydock ;) Options List ${reset}${br}${br}"
    echo "${bgwhite}${black} sh ed setup ${reset}"
    echo "Useful to bootstrap and init easydock ; system.${br}"
    echo "${bgwhite}${black} sh ed up ${reset}"
    echo "Useful to start easydock ; system.${br}"
    echo "${bgwhite}${black} sh ed down ${reset}"
    echo "Useful to stop easydock ; system.${br}"
    echo "${bgwhite}${black} sh ed conn ${reset}"
    echo "Useful to SSH into easydock ; system.${br}"
    echo "${bgwhite}${black} sh ed reset ${reset}"
    echo "Useful to reset easydock ; system.${br}"
    echo "${bgwhite}${black} sh ed info ${reset}"
    echo "Useful to get easydock ; configuration information.${br}${br}"
}


ed_info() {
    echo "${bgpurple}${white}${bold} easydock ;) System Information ${reset}${br}"
    echo "NAME: $ed_appsid"
    echo "PATH: $ed_appsrc"
    if [ $ed_nginx == "build" ]; then
        echo "DOCUMENT ROOT: /var/www/build"
    fi
    if [ $ed_nginx == "public" ]; then
        echo "DOCUMENT ROOT: /var/www/public"
    fi
    if [ $ed_nginx == "root" ]; then
        echo "DOCUMENT ROOT: /var/www"
    fi
    if [ $ed_nginx == "build" ]; then
        echo "CATCH ALL FILE: index.html"
    else
        echo "CATCH ALL FILE: index.php"
    fi
    if [ $ed_portapp == "80" ]; then
        echo "HOST: http://localhost"
    else
        echo "HOST: http://localhost:$ed_portapp"
    fi
    echo "STACK: php:$ed_phpver / mariadb ${br}"
    echo "${bold}MYSQL${reset}"
    echo "HOST: mysql:3306 (int) / 127.0.0.1:$ed_portdb (ext)"
    echo "NAME: $ed_dbname"
    echo "USER: root"
    echo "PASS: $ed_dbpass ${br}"
    echo "${bold}SMTP${reset}"
    echo "HOST: mailhog"
    echo "PORT: 1025"
    echo "USER: ${underline}not required${reset}"
    echo "PASS: ${underline}not required${reset}${br}"
    echo "${bold}SERVICE${reset}"
    echo "phpmyadmin                 http://localhost:$ed_portpma"
    echo "Mail Hog                   http://localhost:$ed_portmh ${br}"
}

ed_reset() {
    read -r -p "Are you sure to reset easydock (this command will reset container and database)? (Y/n): " -n 1 -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "${br}${br}${blue}Wait...${br}${reset}"
        clear
        ed_logo
        docker-compose --env-file ./.env.ed down -v
        docker-compose --env-file ./.env.ed rm
        clear
        ed_logo
        rm -rf ./easydock/mysql/data/*
        cp ./easydock/src/common/.datagitignore ./easydock/mysql/data/.gitignore
        ed_logo
        echo "${bgpurple}${white} easydock ;) has been reset! ${reset}"
    fi
    echo ${br}
}

ed_up() {
    echo "${blue}Wait...${br}${reset}"
    sleep 1s
    clear
    docker-compose --env-file ./.env.ed down
    clear
    ed_logo
    ed_portscheck
    clear
    ed_logo
    docker-compose --env-file ./.env.ed up -d --force-recreate
    clear
    ed_logo
    if [ $ed_portapp == "80" ]; then
        echo "${bgpurple}${white} easydock has been started... visit ${bold}${underline}http://localhost${reset}${bgpurple}${white} ;) ${reset}${br}"
    else
        echo "${bgpurple}${white} easydock has been started... visit ${bold}${underline}http://localhost:$ed_portapp${reset}${bgpurple}${white} ;) ${reset}${br}"
    fi
}

ed_down() {
    read -r -p "Are you sure to stop easydock? (Y/n): " -n 1 -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "${br}${br}${blue}Wait...${br}${reset}"
        docker-compose --env-file ./.env.ed down
        clear
        ed_logo
        echo "${bgpurple}${white} easydock ;) has been stopped! ${reset}"
    fi
    echo ${br}
}

ed_conn() {
    echo "${blue}Wait... ${reset}${br}"
    sleep 1s
    clear
    ed_logo
    echo "${bgblue}${white} Container CLI ${reset}${br}"
    echo "Run ${bgwhite}${black} exit ${reset} to return on your device CLI.${br}"
    docker-compose --env-file ./.env.ed exec app /bin/bash
}

ed_setup() {
    ed_portscheck
    echo "${blue}Wait... ${reset}${br}"
    sleep 1s
    clear
    ed_logo
    echo "${bgblue}${white} Pulling Docker images ${reset}${br}"
    docker-compose --env-file ./.env.ed build --no-cache --pull
    clear
    ed_logo
    echo "${bgpurple}${white} easydock ;) is ready! Run ${bgwhite}${black} sh ed up ${reset}"
}

############################################################ CLI MENU

while [ -n "$menu" ]; do
    case $menu in
    help)
        shift
        ed_help
        exit
        ;;
    info)
        shift
        ed_info
        exit
        ;;
    setup)
        shift
        ed_setup
        exit
        ;;
    reset)
        shift
        ed_reset $action
        exit
        ;;
    up)
        shift
        ed_up
        exit
        ;;
    down)
        shift
        ed_down
        exit
        ;;
    conn)
        shift
        ed_conn
        exit
        ;;
    *)
        shift
        ed_notfound $menu
        exit -1
        ;;
    esac
    shift
done